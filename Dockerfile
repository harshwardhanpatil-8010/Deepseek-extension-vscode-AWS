# Dockerfile optimized for production
# PreciOps AI DevOps Agent

# Stage 1: Build/Asset Preparation Stage
# In a real project, this is where you would compile assets (e.g., using Node.js to build a React app).
# Since no source files were found, we'll create a placeholder index.html.
FROM alpine:3.18 AS builder
WORKDIR /app
RUN echo '<h1>Welcome!</h1><p>This static site was generated by PreciOps AI.</p>' > /app/index.html

# Stage 2: Production Stage
# Use a lightweight, official Nginx image.
FROM nginx:1.25-alpine

# Best Practice: Add metadata labels
LABEL maintainer="PreciOps AI <agent@preciops.com>"
LABEL description="Production image for serving static content with Nginx."

# Copy the static assets from the builder stage to the Nginx public directory.
COPY --from=builder /app/index.html /usr/share/nginx/html/index.html

# Optional: If you have a custom Nginx configuration, uncomment the next line.
# COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port 80 for the web server.
EXPOSE 80

# The Nginx base image is already configured to run as a non-root user for its worker processes.
# The CMD instruction starts Nginx in the foreground, which is standard for containers.
CMD ["nginx", "-g", "daemon off;"]
